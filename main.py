import sys
import pyaudio
import logging
import json
import os
import asyncio
import soundfile as sf
import numpy as np
import torch
import gc

# Importujeme funkce z na≈°ich modul≈Ø
from audio import initialize_porcupine, initialize_vad, capture_wake_word, record_with_vad
from stt_module import initialize_whisper, transcribe_audio_np
from llama_module import initialize_llama, generate_response
from tts_module import initialize_tts, speak_async

# Nastaven√≠ logov√°n√≠
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def load_config(path="config.json"):
    """Naƒçte konfiguraci ze souboru."""
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        logging.error(f"Konfiguraƒçn√≠ soubor '{path}' nebyl nalezen.")
        sys.exit(1)
    except json.JSONDecodeError:
        logging.error(f"Chyba p≈ôi parsov√°n√≠ souboru '{path}'.")
        sys.exit(1)

def get_audio_device_index(p: pyaudio.PyAudio):
    """Vyp√≠≈°e dostupn√© audio vstupy a po≈æ√°d√° u≈æivatele o v√Ωbƒõr."""
    info = p.get_host_api_info_by_index(0)
    num_devices = info.get('deviceCount')
    
    input_devices = []
    print("\n--- Dostupn√© audio vstupy ---")
    for i in range(num_devices):
        device_info = p.get_device_info_by_host_api_device_index(0, i)
        if device_info.get('maxInputChannels') > 0:
            input_devices.append((i, device_info.get('name')))
            print(f"  Index: {i}, N√°zev: {device_info.get('name')}")
    print("------------------------------\n")

    while True:
        try:
            choice = int(input("Zadejte index mikrofonu, kter√Ω chcete pou≈æ√≠t: "))
            if any(choice == dev[0] for dev in input_devices):
                return choice
            else:
                print("Neplatn√Ω index. Zkuste to pros√≠m znovu.")
        except ValueError:
            print("Neplatn√Ω vstup. Zadejte pros√≠m ƒç√≠slo.")

def normalize_audio(audio_data_np: np.ndarray) -> np.ndarray:
    """
    Zes√≠l√≠ nahr√°vku na optim√°ln√≠ √∫rove≈à pro Whisper.
    """
    logging.info("Normalizuji hlasitost nahr√°vky...")
    peak = np.abs(audio_data_np).max()
    if peak == 0:
        return audio_data_np # Nahr√°vka je tich√°

    # C√≠lov√° hlasitost (80% maxim√°ln√≠ mo≈æn√©)
    target_peak = 32767 * 0.8
    gain = target_peak / peak
    
    normalized_audio = (audio_data_np * gain).astype(np.int16)
    return normalized_audio

async def main():
    """Hlavn√≠ asynchronn√≠ smyƒçka asistenta."""
    porcupine = None
    pa = None
    loop = asyncio.get_event_loop()

    try:
        config = load_config()
        
        script_dir = os.path.dirname(os.path.abspath(__file__))
        config['porcupine']['model_path'] = os.path.join(script_dir, config['porcupine']['model_path'])
        config['llama']['model'] = os.path.join(script_dir, config['llama']['model'])

        pa = pyaudio.PyAudio()
        
        device_index = get_audio_device_index(pa)
        config['audio']['device_index'] = device_index
        config['audio']['wake_word_device_index'] = device_index
        
        logging.info("Inicializuji v≈°echny modely, pros√≠m ƒçekejte...")
        porcupine = await loop.run_in_executor(None, initialize_porcupine, config)
        vad_model, _ = await loop.run_in_executor(None, initialize_vad)
        whisper_model = await loop.run_in_executor(None, initialize_whisper, config)
        llm = await loop.run_in_executor(None, initialize_llama, config)
        tts = await loop.run_in_executor(None, initialize_tts, config)
        logging.info(f"\n‚úÖ V≈°echny modely √∫spƒõ≈°nƒõ naƒçteny. Asistent je p≈ôipraven.")
        
        while True:
            logging.info(f"ƒåek√°m na kl√≠ƒçov√© slovo '{config['porcupine']['keyword']}'...")
            
            keyword_index = await loop.run_in_executor(None, capture_wake_word, porcupine, pa, config)

            if keyword_index >= 0:
                logging.info("üü¢ Kl√≠ƒçov√© slovo detekov√°no!")
                await speak_async(tts, "Ano?")
                
                await asyncio.sleep(0.5)

                logging.info("Nahr√°v√°m tv≈Øj p≈ô√≠kaz...")
                audio_data_np = await loop.run_in_executor(None, record_with_vad, config, pa, vad_model)

                if audio_data_np.size > 0:
                    normalized_audio = normalize_audio(audio_data_np)

                    sample_rate = config['silero_vad']['sample_rate']
                    sf.write('debug_recording.wav', normalized_audio, sample_rate)
                    logging.info("Normalizovan√° nahr√°vka ulo≈æena do 'debug_recording.wav'.")

                    transcribed_text = await loop.run_in_executor(None, transcribe_audio_np, whisper_model, normalized_audio, config)
                    
                    if transcribed_text:
                        response_text = await loop.run_in_executor(None, generate_response, llm, transcribed_text, config)
                        await speak_async(tts, response_text)
                    else:
                        logging.warning("P≈ôepis byl pr√°zdn√Ω, zkuste to znovu.")
                        await speak_async(tts, "Nerozumƒõl jsem, zkuste to pros√≠m znovu.")
                else:
                    logging.info("Nahr√°vka byla pr√°zdn√°.")

    except Exception as e:
        logging.error(f"Kritick√° chyba v hlavn√≠ smyƒçce: {e}", exc_info=True)
    finally:
        logging.info("Ukonƒçuji aplikaci a prov√°d√≠m √∫klid...")
        if 'pa' in locals():
            try:
                pa.terminate()
                logging.info("PyAudio ukonƒçeno.")
            except Exception as e:
                logging.error(f"Chyba p≈ôi ukonƒçen√≠ PyAudio: {e}")
        if 'porcupine' in locals():
            try:
                porcupine.delete()
                logging.info("Porcupine ukonƒçeno.")
            except Exception as e:
                logging.error(f"Chyba p≈ôi ukonƒçen√≠ Porcupine: {e}")
        if 'llm' in locals():
            try:
                del llm
                logging.info("LLaMA ukonƒçeno.")
            except Exception as e:
                logging.error(f"Chyba p≈ôi ukonƒçen√≠ LLaMA: {e}")
        if 'tts' in locals():
            try:
                tts = None
                logging.info("TTS ukonƒçeno.")
            except Exception as e:
                logging.error(f"Chyba p≈ôi ukonƒçen√≠ TTS: {e}")
        if 'vad_model' in locals():
            try:
                vad_model = None
                logging.info("VAD model ukonƒçen.")
            except Exception as e:
                logging.error(f"Chyba p≈ôi ukonƒçen√≠ VAD: {e}")
        if 'whisper_model' in locals():
            try:
                del whisper_model
                logging.info("Whisper model ukonƒçen.")
            except Exception as e:
                logging.error(f"Chyba p≈ôi ukonƒçen√≠ Whisper: {e}")
        try:
            torch.cuda.empty_cache()
            logging.info("GPU pamƒõ≈• uvolnƒõna.")
        except Exception as e:
            logging.error(f"Chyba p≈ôi uvolnƒõn√≠ GPU pamƒõti: {e}")
        try:
            gc.collect()
            logging.info("Garbage collection provedena.")
        except Exception as e:
            logging.error(f"Chyba p≈ôi garbage collection: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nAplikace ukonƒçena u≈æivatelem.")